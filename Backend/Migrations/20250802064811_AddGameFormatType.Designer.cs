// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250802064811_AddGameFormatType")]
    partial class AddGameFormatType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Backend.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Backend.Models.Fixture", b =>
                {
                    b.Property<int>("FixtureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBye")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsKnockout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfGames")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WinnerRegistrationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FixtureId");

                    b.HasIndex("GameId");

                    b.HasIndex("WinnerRegistrationId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("Backend.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Backend.Models.GameFormatType", b =>
                {
                    b.Property<int>("GameFormatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GameFormatTypeId");

                    b.ToTable("GameFormatTypes");
                });

            modelBuilder.Entity("Backend.Models.LeaderboardEntry", b =>
                {
                    b.Property<int>("LeaderboardEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Losses")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeaderboardEntryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GameId");

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("Backend.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTeamNomination")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerEmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreferredTimeSlot")
                        .HasColumnType("INTEGER");

                    b.HasKey("RegistrationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FixtureId");

                    b.HasIndex("GameId");

                    b.HasIndex("PartnerEmployeeId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Backend.Models.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Team1Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Team2Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScoreId");

                    b.HasIndex("FixtureId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("GameGameFormatType", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupportedFormatsGameFormatTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GamesGameId", "SupportedFormatsGameFormatTypeId");

                    b.HasIndex("SupportedFormatsGameFormatTypeId");

                    b.ToTable("GameGameFormatType");
                });

            modelBuilder.Entity("Backend.Models.Fixture", b =>
                {
                    b.HasOne("Backend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Registration", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerRegistrationId");

                    b.Navigation("Game");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Backend.Models.LeaderboardEntry", b =>
                {
                    b.HasOne("Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Backend.Models.Registration", b =>
                {
                    b.HasOne("Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Fixture", null)
                        .WithMany("Registrations")
                        .HasForeignKey("FixtureId");

                    b.HasOne("Backend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Employee", "PartnerEmployee")
                        .WithMany()
                        .HasForeignKey("PartnerEmployeeId");

                    b.Navigation("Employee");

                    b.Navigation("Game");

                    b.Navigation("PartnerEmployee");
                });

            modelBuilder.Entity("Backend.Models.Score", b =>
                {
                    b.HasOne("Backend.Models.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("GameGameFormatType", b =>
                {
                    b.HasOne("Backend.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.GameFormatType", null)
                        .WithMany()
                        .HasForeignKey("SupportedFormatsGameFormatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.Fixture", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
